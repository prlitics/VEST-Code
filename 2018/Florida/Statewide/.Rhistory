print(ev)
if(ev %in% a[,c(id_col)]){
a1 <- a %>%
filter(grepl(ev,a[,c(id_col)]))
for (i in 2:ncol(a)) {
b <- a2 %>%
select(id_col,i) %>%
mutate(b1  = round((b[,2]/sum(b[,2]))*as.numeric(a1[,2]))) %>%
arrange(desc(.[[2]]))
view(b)
b[2]<-b[2]+b["b1"]
error = sum(b["b1"])-a1[,2]
b[1,2]<-b[1,2]-error
b<-b[1:2]
a3 <- merge(x=a3, y=b, by = id_col)
}
a2<-a3
}else{next}
df<-rbind(df,a2)
df
}
}
df
}
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
precinct_reallocatR <- function(df, id_col, county_name = NA, county_stem = NA, ev_name){
# A function to reallocate votes cast to early/virtual districts to remaining districts in a county
# Created by Peter R. Licari. Inspired by code by Brian Amos. Produced for Voting and Elections Science Team (VEST)
# Accepts datafames where each column is the number of votes for an electoral outcome (e.g., number of democratic votes for governor,
# number of people voting yes on an amendment, etc) and each row is a precinct.
#
# Returns a dataframes where each precinct vote number in the specified counties is adjusted in proportion to that precinct's
# overall vote share for that particular race within its county.
# df: the dataframe in the aforementioned format (columns are specific race outcomes, row are specific precincts)
# id_col: the name of the column with the precinct identifiers.
# county_name: the string, or vector of strings, containing the name(s) of the count(y/ies) to be affected.
# county_stem: If the dataframe does not have a dedicated column for county names, but the Precinct IDs have stems that ID the county
# (for example "SEM0001" and "ORA0001" for "Seminole" and "Orange" counties, respectively), you can insert the stems
# ("SEM" and "ORA") into county_stem instead.
#  ev_name: String, or vector of strings, of the early vote / virtual precinct(s).
##########################################
##########################################
# Sets index (important when adjusting multiple counties)
index<-0
# Determining if it is using county name or stem
if(is.na(county_name)){
county_identification <- county_stem
}
else if(is.na(county_stem)){
county_identification <- county_name
}
else if (is.na(county_stem) & is.na(county_name)){
stop("Error: Both county_stem and county_name cannot be NA")
}
# Going through multiple counties
for (cntystm in county_identification){
#filters out county being adjusted from the main dataframe.
a <-df %>%
filter(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)]))
#main dataframe sans county that is being adjusted
df <- df %>%
filter(!(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)])))
# %in% helps if there are multiple precincts in ev_name--and if there are more than 1 per county
a2<- a %>%
filter(!(a[,c(id_col)] %in% c(ev_name)))
a3 <- a2 %>%
select(id_col)
view(a2)
#Iterative loop to tackle multiple early/virtual precincts in single county
for (ev in ev_name) {
print(ev)
if(ev %in% a[,c(id_col)]){
a1 <- a %>%
filter(grepl(ev,a[,c(id_col)]))
for (i in 2:ncol(a)) {
b <- a2 %>%
select(id_col,i) %>%
mutate(b1  = round((b[,2]/sum(b[,2]))*as.numeric(a1[,2]))) %>%
arrange(desc(.[[2]]))
b[2]<-b[2]+b["b1"]
error = sum(b["b1"])-a1[,2]
b[1,2]<-b[1,2]-error
b<-b[1:2]
a3 <- merge(x=a3, y=b, by = id_col)
}
a2<-a3
}else{next}
df<-rbind(df,a2)
df
}
}
df
}
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
precinct_reallocatR <- function(df, id_col, county_name = NA, county_stem = NA, ev_name){
# A function to reallocate votes cast to early/virtual districts to remaining districts in a county
# Created by Peter R. Licari. Inspired by code by Brian Amos. Produced for Voting and Elections Science Team (VEST)
# Accepts datafames where each column is the number of votes for an electoral outcome (e.g., number of democratic votes for governor,
# number of people voting yes on an amendment, etc) and each row is a precinct.
#
# Returns a dataframes where each precinct vote number in the specified counties is adjusted in proportion to that precinct's
# overall vote share for that particular race within its county.
# df: the dataframe in the aforementioned format (columns are specific race outcomes, row are specific precincts)
# id_col: the name of the column with the precinct identifiers.
# county_name: the string, or vector of strings, containing the name(s) of the count(y/ies) to be affected.
# county_stem: If the dataframe does not have a dedicated column for county names, but the Precinct IDs have stems that ID the county
# (for example "SEM0001" and "ORA0001" for "Seminole" and "Orange" counties, respectively), you can insert the stems
# ("SEM" and "ORA") into county_stem instead.
#  ev_name: String, or vector of strings, of the early vote / virtual precinct(s).
##########################################
##########################################
# Sets index (important when adjusting multiple counties)
index<-0
# Determining if it is using county name or stem
if(is.na(county_name)){
county_identification <- county_stem
}
else if(is.na(county_stem)){
county_identification <- county_name
}
else if (is.na(county_stem) & is.na(county_name)){
stop("Error: Both county_stem and county_name cannot be NA")
}
# Going through multiple counties
for (cntystm in county_identification){
#filters out county being adjusted from the main dataframe.
a <-df %>%
filter(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)]))
#main dataframe sans county that is being adjusted
df <- df %>%
filter(!(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)])))
# %in% helps if there are multiple precincts in ev_name--and if there are more than 1 per county
a2<- a %>%
filter(!(a[,c(id_col)] %in% c(ev_name)))
a3 <- a2 %>%
select(id_col)
#Iterative loop to tackle multiple early/virtual precincts in single county
for (ev in ev_name) {
print((ev %in% a[,c(id_col)]))
if(ev %in% a[,c(id_col)]){
a1 <- a %>%
filter(grepl(ev,a[,c(id_col)]))
for (i in 2:ncol(a)) {
b <- a2 %>%
select(id_col,i) %>%
mutate(b1  = round((b[,2]/sum(b[,2]))*as.numeric(a1[,2]))) %>%
arrange(desc(.[[2]]))
b[2]<-b[2]+b["b1"]
error = sum(b["b1"])-a1[,2]
b[1,2]<-b[1,2]-error
b<-b[1:2]
a3 <- merge(x=a3, y=b, by = id_col)
}
a2<-a3
}else{next}
df<-rbind(df,a2)
df
}
}
df
}
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
precinct_reallocatR <- function(df, id_col, county_name = NA, county_stem = NA, ev_name){
# A function to reallocate votes cast to early/virtual districts to remaining districts in a county
# Created by Peter R. Licari. Inspired by code by Brian Amos. Produced for Voting and Elections Science Team (VEST)
# Accepts datafames where each column is the number of votes for an electoral outcome (e.g., number of democratic votes for governor,
# number of people voting yes on an amendment, etc) and each row is a precinct.
#
# Returns a dataframes where each precinct vote number in the specified counties is adjusted in proportion to that precinct's
# overall vote share for that particular race within its county.
# df: the dataframe in the aforementioned format (columns are specific race outcomes, row are specific precincts)
# id_col: the name of the column with the precinct identifiers.
# county_name: the string, or vector of strings, containing the name(s) of the count(y/ies) to be affected.
# county_stem: If the dataframe does not have a dedicated column for county names, but the Precinct IDs have stems that ID the county
# (for example "SEM0001" and "ORA0001" for "Seminole" and "Orange" counties, respectively), you can insert the stems
# ("SEM" and "ORA") into county_stem instead.
#  ev_name: String, or vector of strings, of the early vote / virtual precinct(s).
##########################################
##########################################
# Sets index (important when adjusting multiple counties)
index<-0
# Determining if it is using county name or stem
if(is.na(county_name)){
county_identification <- county_stem
}
else if(is.na(county_stem)){
county_identification <- county_name
}
else if (is.na(county_stem) & is.na(county_name)){
stop("Error: Both county_stem and county_name cannot be NA")
}
# Going through multiple counties
for (cntystm in county_identification){
#filters out county being adjusted from the main dataframe.
a <-df %>%
filter(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)]))
#main dataframe sans county that is being adjusted
df <- df %>%
filter(!(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)])))
# %in% helps if there are multiple precincts in ev_name--and if there are more than 1 per county
a2<- a %>%
filter(!(a[,c(id_col)] %in% c(ev_name)))
a3 <- a2 %>%
select(id_col)
#Iterative loop to tackle multiple early/virtual precincts in single county
for (ev in ev_name) {
print((ev %in% a[,c(id_col)]))
if(ev %in% a[,c(id_col)]){
a1 <- a %>%
filter(grepl(ev,a[,c(id_col)]))
for (i in 2:ncol(a)) {
b <- a2 %>%
select(id_col,i) %>%
mutate(b1  = round((b[,2]/sum(b[,2]))*as.numeric(a1[,2]))) %>%
arrange(desc(.[[2]]))
b[2]<-b[2]+b["b1"]
error = sum(b["b1"])-a1[,2]
b[1,2]<-b[1,2]-error
b<-b[1:2]
a3 <- merge(x=a3, y=b, by = id_col)
}
a2<-a3
}else{
print(skipped)
next}
df<-rbind(df,a2)
df
}
}
df
}
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
precinct_reallocatR <- function(df, id_col, county_name = NA, county_stem = NA, ev_name){
# A function to reallocate votes cast to early/virtual districts to remaining districts in a county
# Created by Peter R. Licari. Inspired by code by Brian Amos. Produced for Voting and Elections Science Team (VEST)
# Accepts datafames where each column is the number of votes for an electoral outcome (e.g., number of democratic votes for governor,
# number of people voting yes on an amendment, etc) and each row is a precinct.
#
# Returns a dataframes where each precinct vote number in the specified counties is adjusted in proportion to that precinct's
# overall vote share for that particular race within its county.
# df: the dataframe in the aforementioned format (columns are specific race outcomes, row are specific precincts)
# id_col: the name of the column with the precinct identifiers.
# county_name: the string, or vector of strings, containing the name(s) of the count(y/ies) to be affected.
# county_stem: If the dataframe does not have a dedicated column for county names, but the Precinct IDs have stems that ID the county
# (for example "SEM0001" and "ORA0001" for "Seminole" and "Orange" counties, respectively), you can insert the stems
# ("SEM" and "ORA") into county_stem instead.
#  ev_name: String, or vector of strings, of the early vote / virtual precinct(s).
##########################################
##########################################
# Sets index (important when adjusting multiple counties)
index<-0
# Determining if it is using county name or stem
if(is.na(county_name)){
county_identification <- county_stem
}
else if(is.na(county_stem)){
county_identification <- county_name
}
else if (is.na(county_stem) & is.na(county_name)){
stop("Error: Both county_stem and county_name cannot be NA")
}
# Going through multiple counties
for (cntystm in county_identification){
#filters out county being adjusted from the main dataframe.
a <-df %>%
filter(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)]))
#main dataframe sans county that is being adjusted
df <- df %>%
filter(!(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)])))
# %in% helps if there are multiple precincts in ev_name--and if there are more than 1 per county
a2<- a %>%
filter(!(a[,c(id_col)] %in% c(ev_name)))
a3 <- a2 %>%
select(id_col)
#Iterative loop to tackle multiple early/virtual precincts in single county
for (ev in ev_name) {
print((ev %in% a[,c(id_col)]))
if(ev %in% a[,c(id_col)]){
a1 <- a %>%
filter(grepl(ev,a[,c(id_col)]))
for (i in 2:ncol(a)) {
b <- a2 %>%
select(id_col,i) %>%
mutate(b1  = round((b[,2]/sum(b[,2]))*as.numeric(a1[,2]))) %>%
arrange(desc(.[[2]]))
b[2]<-b[2]+b["b1"]
error = sum(b["b1"])-a1[,2]
b[1,2]<-b[1,2]-error
b<-b[1:2]
a3 <- merge(x=a3, y=b, by = id_col)
}
a2<-a3
}else{
print("skipped")
next}
df<-rbind(df,a2)
df
}
}
df
}
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
precinct_reallocatR <- function(df, id_col, county_name = NA, county_stem = NA, ev_name){
# A function to reallocate votes cast to early/virtual districts to remaining districts in a county
# Created by Peter R. Licari. Inspired by code by Brian Amos. Produced for Voting and Elections Science Team (VEST)
# Accepts datafames where each column is the number of votes for an electoral outcome (e.g., number of democratic votes for governor,
# number of people voting yes on an amendment, etc) and each row is a precinct.
#
# Returns a dataframes where each precinct vote number in the specified counties is adjusted in proportion to that precinct's
# overall vote share for that particular race within its county.
# df: the dataframe in the aforementioned format (columns are specific race outcomes, row are specific precincts)
# id_col: the name of the column with the precinct identifiers.
# county_name: the string, or vector of strings, containing the name(s) of the count(y/ies) to be affected.
# county_stem: If the dataframe does not have a dedicated column for county names, but the Precinct IDs have stems that ID the county
# (for example "SEM0001" and "ORA0001" for "Seminole" and "Orange" counties, respectively), you can insert the stems
# ("SEM" and "ORA") into county_stem instead.
#  ev_name: String, or vector of strings, of the early vote / virtual precinct(s).
##########################################
##########################################
# Sets index (important when adjusting multiple counties)
index<-0
# Determining if it is using county name or stem
if(is.na(county_name)){
county_identification <- county_stem
}
else if(is.na(county_stem)){
county_identification <- county_name
}
else if (is.na(county_stem) & is.na(county_name)){
stop("Error: Both county_stem and county_name cannot be NA")
}
# Going through multiple counties
for (cntystm in county_identification){
#filters out county being adjusted from the main dataframe.
a <-df %>%
filter(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)]))
#main dataframe sans county that is being adjusted
df <- df %>%
filter(!(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)])))
# %in% helps if there are multiple precincts in ev_name--and if there are more than 1 per county
a2<- a %>%
filter(!(a[,c(id_col)] %in% c(ev_name)))
a3 <- a2 %>%
select(id_col)
#Iterative loop to tackle multiple early/virtual precincts in single county
for (ev in ev_name) {
print((ev %in% a[,c(id_col)]))
if(ev %in% a[,c(id_col)]){
a1 <- a %>%
filter(grepl(ev,a[,c(id_col)]))
for (i in 2:ncol(a)) {
b <- a2 %>%
select(id_col,i) %>%
mutate(b1  = round((b[,2]/sum(b[,2]))*as.numeric(a1[,2]))) %>%
arrange(desc(.[[2]]))
b[2]<-b[2]+b["b1"]
error = sum(b["b1"])-a1[,2]
b[1,2]<-b[1,2]-error
b<-b[1:2]
a3 <- merge(x=a3, y=b, by = id_col)
}
a2<-a3
df<-rbind(df,a2)
df
}else{next}
}
}
df
}
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
precinct_reallocatR <- function(df, id_col, county_name = NA, county_stem = NA, ev_name){
# A function to reallocate votes cast to early/virtual districts to remaining districts in a county
# Created by Peter R. Licari. Inspired by code by Brian Amos. Produced for Voting and Elections Science Team (VEST)
# Accepts datafames where each column is the number of votes for an electoral outcome (e.g., number of democratic votes for governor,
# number of people voting yes on an amendment, etc) and each row is a precinct.
#
# Returns a dataframes where each precinct vote number in the specified counties is adjusted in proportion to that precinct's
# overall vote share for that particular race within its county.
# df: the dataframe in the aforementioned format (columns are specific race outcomes, row are specific precincts)
# id_col: the name of the column with the precinct identifiers.
# county_name: the string, or vector of strings, containing the name(s) of the count(y/ies) to be affected.
# county_stem: If the dataframe does not have a dedicated column for county names, but the Precinct IDs have stems that ID the county
# (for example "SEM0001" and "ORA0001" for "Seminole" and "Orange" counties, respectively), you can insert the stems
# ("SEM" and "ORA") into county_stem instead.
#  ev_name: String, or vector of strings, of the early vote / virtual precinct(s).
##########################################
##########################################
# Sets index (important when adjusting multiple counties)
index<-0
# Determining if it is using county name or stem
if(is.na(county_name)){
county_identification <- county_stem
}
else if(is.na(county_stem)){
county_identification <- county_name
}
else if (is.na(county_stem) & is.na(county_name)){
stop("Error: Both county_stem and county_name cannot be NA")
}
# Going through multiple counties
for (cntystm in county_identification){
#filters out county being adjusted from the main dataframe.
a <-df %>%
filter(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)]))
#main dataframe sans county that is being adjusted
df <- df %>%
filter(!(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)])))
# %in% helps if there are multiple precincts in ev_name--and if there are more than 1 per county
a2<- a %>%
filter(!(a[,c(id_col)] %in% c(ev_name)))
a3 <- a2 %>%
select(id_col)
#Iterative loop to tackle multiple early/virtual precincts in single county
for (ev in ev_name) {
print(cntystm)
print(ev)
print((ev %in% a[,c(id_col)]))
if(ev %in% a[,c(id_col)]){
a1 <- a %>%
filter(grepl(ev,a[,c(id_col)]))
for (i in 2:ncol(a)) {
b <- a2 %>%
select(id_col,i) %>%
mutate(b1  = round((b[,2]/sum(b[,2]))*as.numeric(a1[,2]))) %>%
arrange(desc(.[[2]]))
b[2]<-b[2]+b["b1"]
error = sum(b["b1"])-a1[,2]
b[1,2]<-b[1,2]-error
b<-b[1:2]
a3 <- merge(x=a3, y=b, by = id_col)
}
a2<-a3
df<-rbind(df,a2)
df
}else{next}
}
}
df
}
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
precinct_reallocatR <- function(df, id_col, county_name = NA, county_stem = NA, ev_name){
# A function to reallocate votes cast to early/virtual districts to remaining districts in a county
# Created by Peter R. Licari. Inspired by code by Brian Amos. Produced for Voting and Elections Science Team (VEST)
# Accepts datafames where each column is the number of votes for an electoral outcome (e.g., number of democratic votes for governor,
# number of people voting yes on an amendment, etc) and each row is a precinct.
#
# Returns a dataframes where each precinct vote number in the specified counties is adjusted in proportion to that precinct's
# overall vote share for that particular race within its county.
# df: the dataframe in the aforementioned format (columns are specific race outcomes, row are specific precincts)
# id_col: the name of the column with the precinct identifiers.
# county_name: the string, or vector of strings, containing the name(s) of the count(y/ies) to be affected.
# county_stem: If the dataframe does not have a dedicated column for county names, but the Precinct IDs have stems that ID the county
# (for example "SEM0001" and "ORA0001" for "Seminole" and "Orange" counties, respectively), you can insert the stems
# ("SEM" and "ORA") into county_stem instead.
#  ev_name: String, or vector of strings, of the early vote / virtual precinct(s).
##########################################
##########################################
# Sets index (important when adjusting multiple counties)
index<-0
# Determining if it is using county name or stem
if(is.na(county_name)){
county_identification <- county_stem
}
else if(is.na(county_stem)){
county_identification <- county_name
}
else if (is.na(county_stem) & is.na(county_name)){
stop("Error: Both county_stem and county_name cannot be NA")
}
# Going through multiple counties
for (cntystm in county_identification){
#filters out county being adjusted from the main dataframe.
a <-df %>%
filter(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)]))
#main dataframe sans county that is being adjusted
df <- df %>%
filter(!(grepl(paste(cntystm,"*",sep = ""),df[,c(id_col)])))
# %in% helps if there are multiple precincts in ev_name--and if there are more than 1 per county
a2<- a %>%
filter(!(a[,c(id_col)] %in% c(ev_name)))
a3 <- a2 %>%
select(id_col)
#Iterative loop to tackle multiple early/virtual precincts in single county
for (ev in ev_name) {
print(cntystm)
print(ev)
print((ev %in% a[,c(id_col)]))
if(ev %in% a[,c(id_col)]){
a1 <- a %>%
filter(grepl(ev,a[,c(id_col)]))
view(a1)
for (i in 2:ncol(a)) {
b <- a2 %>%
select(id_col,i) %>%
mutate(b1  = round((b[,2]/sum(b[,2]))*as.numeric(a1[,2]))) %>%
arrange(desc(.[[2]]))
b[2]<-b[2]+b["b1"]
error = sum(b["b1"])-a1[,2]
b[1,2]<-b[1,2]-error
b<-b[1:2]
a3 <- merge(x=a3, y=b, by = id_col)
}
a2<-a3
df<-rbind(df,a2)
df
}else{next}
}
}
df
}
Seminole5<-precinct_reallocatR(df=FL.2018.Precs.Test, id_col = "Pct_std", county_stem = c("SEM","BRE"), ev_name = c("SEM00EV","BRE0999"))
